#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
labnote

Keith Hughitt <khughitt@umd.edu>
"""
import labnote

def main():
    """Generate HTML lab notebook"""
    import os
    import shutil
    from pkg_resources import resource_filename, Requirement
    from jinja2 import Environment, PackageLoader

    print("- Loading configuration")

    # Get default args
    conf = labnote.config.load_config()

    # update default arguments with user-specified settings
    parser = labnote.config.get_args()

    # convert to a python dict and return without 
    args = parser.parse_args()
    args = dict((k, v) for k, v in list(vars(args).items()) if v is not None)

    conf.update(args)

    # Find matching lab notebook entries
    categories = {}

    # Find valid notebook entry directories
    filepaths = labnote.notebook.find_valid_files(conf['input_dir'], 
                                          conf['search_paths'],
                                          conf['include_files'])

    # Iterate over matches files and create notebook entries
    for filepath in filepaths:
        filename = os.path.basename(filepath)
        sub_dir = os.path.basename(os.path.dirname(filepath))

        entry = labnote.notebook.create_entry(filename, filepath,
                                              conf['input_dir'])

        # determine category to use
        category = labnote.notebook.get_category(sub_dir, conf['categories'])
        
        # add entry to master dictionary
        if category not in categories:
            categories[category] = []
        categories[category].append(entry)

    # Load Jinja2 template
    env = Environment(loader=PackageLoader('labnote', 'templates'))

    # Render template
    template = env.get_template('index.html')
    html = template.render(author=conf['author'], title=conf['title'],
                        email=conf['email'], categories=categories)

    print("- Generating notebook HTML")

    # Output notebook
    outfile = os.path.join(conf['output_dir'], 'index.html')
    with open(outfile, 'w') as fp:
        fp.write(html)

    print("- Saving notebook to %s" % conf['output_dir'])

    # Path to resources/ directory
    resources = resource_filename(Requirement.parse('labnote'),
                                  os.path.join('labnote', 'resources'))

    # Copy CSS and image resources to output directory if it does not already
    # exist.
    resource_dir = os.path.join(conf['output_dir'], 'resources')

    if not os.path.isdir(resource_dir):
        shutil.copytree(resources, resource_dir,
                        ignore=shutil.ignore_patterns("__init__.py", "__pycache__"))

    print("- Finished")

if __name__ == '__main__':
    main()
